package hr.terg.evag.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DeliverableAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeliverableAllPropertiesEquals(Deliverable expected, Deliverable actual) {
        assertDeliverableAutoGeneratedPropertiesEquals(expected, actual);
        assertDeliverableAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeliverableAllUpdatablePropertiesEquals(Deliverable expected, Deliverable actual) {
        assertDeliverableUpdatableFieldsEquals(expected, actual);
        assertDeliverableUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeliverableAutoGeneratedPropertiesEquals(Deliverable expected, Deliverable actual) {
        assertThat(actual)
            .as("Verify Deliverable auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeliverableUpdatableFieldsEquals(Deliverable expected, Deliverable actual) {
        assertThat(actual)
            .as("Verify Deliverable relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a -> assertThat(a.getFormat()).as("check format").isEqualTo(expected.getFormat()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getPackagePath()).as("check packagePath").isEqualTo(expected.getPackagePath()))
            .satisfies(a -> assertThat(a.getPackageSize()).as("check packageSize").isEqualTo(expected.getPackageSize()))
            .satisfies(a -> assertThat(a.getChecksum()).as("check checksum").isEqualTo(expected.getChecksum()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()))
            .satisfies(a -> assertThat(a.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(expected.getLastModifiedDate()))
            .satisfies(a -> assertThat(a.getAddendum()).as("check addendum").isEqualTo(expected.getAddendum()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeliverableUpdatableRelationshipsEquals(Deliverable expected, Deliverable actual) {
        assertThat(actual)
            .as("Verify Deliverable relationships")
            .satisfies(a -> assertThat(a.getProject()).as("check project").isEqualTo(expected.getProject()));
    }
}
