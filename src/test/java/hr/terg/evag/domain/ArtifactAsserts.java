package hr.terg.evag.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ArtifactAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArtifactAllPropertiesEquals(Artifact expected, Artifact actual) {
        assertArtifactAutoGeneratedPropertiesEquals(expected, actual);
        assertArtifactAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArtifactAllUpdatablePropertiesEquals(Artifact expected, Artifact actual) {
        assertArtifactUpdatableFieldsEquals(expected, actual);
        assertArtifactUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArtifactAutoGeneratedPropertiesEquals(Artifact expected, Artifact actual) {
        assertThat(actual)
            .as("Verify Artifact auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArtifactUpdatableFieldsEquals(Artifact expected, Artifact actual) {
        assertThat(actual)
            .as("Verify Artifact relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a -> assertThat(a.getLink()).as("check link").isEqualTo(expected.getLink()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getFileSize()).as("check fileSize").isEqualTo(expected.getFileSize()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()))
            .satisfies(a -> assertThat(a.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(expected.getLastModifiedDate()))
            .satisfies(a -> assertThat(a.getAddendum()).as("check addendum").isEqualTo(expected.getAddendum()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArtifactUpdatableRelationshipsEquals(Artifact expected, Artifact actual) {
        assertThat(actual)
            .as("Verify Artifact relationships")
            .satisfies(a -> assertThat(a.getProjects()).as("check projects").isEqualTo(expected.getProjects()));
    }
}
